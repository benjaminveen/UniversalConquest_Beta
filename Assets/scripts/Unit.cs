//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
public class Unit : MonoBehaviour
{
	public Vector2 gridPosition = Vector2.zero;
	
	public Vector3 moveDestination;
	public float moveSpeed = 10.0f;
	
	public int movementPerActionPoint = 5;
	public int attackRange = 1;
	
	public bool moving = false;
	public bool attacking = false;

	public string unitType = "Fighter";
	public string unitName = "George";
	public int HP = 25;
	public int startHP = 25;

	public float attackChance = 0.75f;
	public float defenseReduction = 0.15f;
	public int damageBase = 5;
	public float damageRollSides = 6; //d6

	public int actionPoints = 2;

	public GameObject explosion;
	
	//movement animation
	public List<Vector3> positionQueue = new List<Vector3>();	
	//
	
	void Awake () {
		moveDestination = transform.position;
	}
	
	// Use this for initialization
	void Start () {
		
	}
	
	// Update is called once per frame
	public virtual void Update () {	
		//death animation
		if (HP <= 0) 
		{
			Instantiate (explosion, transform.position, transform.rotation);
			Destroy (gameObject);
			GameManager.instance.currentPlayer.units.Remove (this);
			GameManager.instance.allUnits.Remove (this);
			Debug.Log (GameManager.instance.allUnits);
		}
	}
	
	public virtual void TurnUpdate () {

	}
	void OnMouseDown()
	{
		//click to attack
		if(GameManager.instance.currentUnit != this //cant attack self
		   && !GameManager.instance.currentPlayer.hasUnit (this)//no friendly fire
		   && GameManager.instance.currentUnit.attacking //has to be attacking obviously
		   //can only attack within range of its currently painted attack tiles
		   && GameManager.instance.map[(int)gridPosition.x][(int)gridPosition.y].transform.renderer.material.color == Color.red
		   )
		{
			GameManager.instance.attackWithCurrentPlayer(GameManager.instance.map[(int)gridPosition.x][(int)gridPosition.y]);
		}
		else
		{
			GameManager.instance.currentUnit = this;
			GameManager.instance.removeTileHighlights ();
			GameManager.instance.currentPlayer.resetUnits ();
		}
	}
	public virtual void TurnOnGUI () 
	{

	}
	public void restoreActionPoints()
	{
		actionPoints = 2;
		moving = false;
		attacking = false;
	}
	
	public void OnGUI()
	{
		displayHP ();
		if (GameManager.instance.currentUnit == this)
			displayHUD ();
	}
	void displayHUD()
	{
		float offset = 20f;
		float boxWidth = Screen.width * .18f;
		float boxHeight = Screen.height * .28f;
		float boxX = Screen.width - boxWidth - offset;
		float boxY = Screen.height - boxHeight - offset;
		Rect rect = new Rect (boxX, boxY, boxWidth, boxHeight);
		
		string content = "Unit type: " + unitType;
		content += "\n" + "Unit name: " + unitName;
		content += "\n" + "HP: " + HP + "/" + startHP;
		content += "\n" + "Attack Range: " + attackRange;
		content += "\n" + "Attack Chance: " + attackChance;
		content += "\n" + "Attack base damage: " + damageBase;
		content += "\n" + "Defense: " + defenseReduction;
		content += "\n" + "Movement Range: " + movementPerActionPoint;
		
		GUI.Box (rect, content);
	}
	void displayHP()
	{
		Vector3 location = Camera.main.WorldToScreenPoint(transform.position) + Vector3.up * 35;
		GUI.Label(new Rect(location.x, Screen.height - location.y, 30, 20), HP.ToString());
	}

}

	
	
	

